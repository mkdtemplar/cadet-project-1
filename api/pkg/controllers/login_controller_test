import (
	"cadet-project/pkg/models"
	"context"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestServeHTTP(t *testing.T) {
	// Initialize test variables
	w := httptest.NewRecorder()
	r, _ := http.NewRequest("GET", "/", nil)

	// Create a new LoginController instance using mock dependencies
	lc := &LoginController{
		IUserRepository:      &mockUserRepository{},
		IShipPortsRepository: &mockShipPortsRepository{},
	}

	// Call the ServeHTTP function
	lc.ServeHTTP(w, r)

	// Check if proper HTTP status code and response body is returned
	if w.Code != http.StatusOK {
		t.Errorf("Expected status OK; got %v", w.Code)
	}

	expectedResponseBody := `{
            "id": "123",
            "email": "test@test.com",
            "name": "Test User"
        }`
	if w.Body.String() != expectedResponseBody {
		t.Errorf("Expected response body %s; got %s", expectedResponseBody, w.Body.String())
	}
}

// Mock UserRepository implementation used in test cases
type mockUserRepository struct{}

func (m *mockUserRepository) GetUserEmail(ctx context.Context, email string) (*models.User, error) {
	return &models.User{
		ID:    "123",
		Email: "test@test.com",
		Name:  "Test User",
	}, nil
}

func (m *mockUserRepository) Create(ctx context.Context, u *models.User) (*models.User, error) {
	return u, nil
}

// Mock ShipPortsRepository implementation used in test cases
type mockShipPortsRepository struct{}

func (m *mockShipPortsRepository) FindUserPorts(ctx context.Context, userID string) (*models.User, error) {
	return &models.User{
		ID:    "123",
		Email: "test@test.com",
		Name:  "Test User",
	}, nil
}
